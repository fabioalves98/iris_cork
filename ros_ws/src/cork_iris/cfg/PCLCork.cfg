#!/usr/bin/env python
PACKAGE = "cork_iris"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

control_group = gen.add_group("A_System Control")


type_enum = gen.enum([  gen.const("Original",            int_t, 0, "The original pointcloud"),
                        gen.const("Cork_Pieces",         int_t, 1, "The original pointcloud without the box"),
                        gen.const("Surface_Normals",     int_t, 2, "Surface normals color"),
                        gen.const("Surface_Curvature",   int_t, 3, "Curvature color"),
                        gen.const("Clustering",          int_t, 4, "Clustered point cloud")],
                        "An enum to set size")

control_group.add("type", int_t, 0, "Type of the pointcloud", 4, 0, 4, edit_method=type_enum)

control_group.add("live",             bool_t,     0, "Live view of the PointCloud",       True)
control_group.add("remove_outliers", bool_t,     0, "Remove statistical outliers",       True)
control_group.add("smooth_cloud",     bool_t,     0, "Smooth PointCloud",                 False)
control_group.add("choose_best_cork",     bool_t,     0, "Choose best cork with the current applied algorithm.",                 True)
control_group.add("add_planning_scene_cork",     bool_t,     0, "Add a virtual cork piece to the planning scene",                 True)
control_group.add("roller",     bool_t,     0, "If true filters height by <roller_value>, otherwise uses color to remove box", True)
control_group.add("roller_height_value",     double_t,     0, "Value to use for height filter", 0.70, 0.0001, 5.0)
control_group.add("roller_height_angle",     double_t,     0, "Value to use for height angle filter", 10.0, 0, 360)
control_group.add("roller_width_value",      double_t,     0, "Value to use for width  filter", 0.3, 0, 1)
control_group.add("grab_pos",               double_t,     0, "Distance from center to grab", 0.1, 0, 0.5)


global_clustering_group = gen.add_group("B_Clustering Parameters")

# Clustering Algorithm and Search Params
global_clustering_group.add("leaf_size"         ,double_t,   0, "Voxel down sample leaf size",      0.008, 0.005, 1)
global_clustering_group.add("cluster_tolerance" ,double_t,   0, "Clustering algorithm tolerance",   0.01, 0.005, 1)
global_clustering_group.add("radius_search"     ,double_t,   0, "Search readius for KDTree",        0.01, 0.005, 1)

# Clustering Parameters
global_clustering_group.add("min_cluster_size", int_t,      0, "Min cluster size (Points / X)",     25, 1, 1000)
global_clustering_group.add("max_cluster_size", int_t,      0, "Max cluster size (Points / X)",     1, 1, 100)
global_clustering_group.add("normal_diff",      double_t,   0, "Minimum normal difference",         0.97, 0.001, 1)
global_clustering_group.add("squared_dist",     double_t,   0, "Minimum squared distance",          0.0001, 0.00000001, 1)
global_clustering_group.add("curvature",        double_t,   0, "Minumum curvature difference",      0.07, 0.00001, 1)

# Statistical Outliers Parameters
global_clustering_group.add("mean_k",     int_t,   0, "Mean k on the Statistical Outliers Algorithm", 25, 1, 500)

best_cork_group = gen.add_group("C_Best Cork Algorithm Parameters")

# Best cork algorithm params
best_cork_group.add("z_threshold" ,double_t,   0, "Any cork pieces with a Z bigger than the <highest_z_cork + z_threshold> are removed",  0.05, 0.005, 1)
best_cork_group.add("center_threshold"     ,double_t,   0, "Any cork pieces further away from the center than <center_threshold> are removed", 0.2, 0.005, 1)
best_cork_group.add("space_distance_threshold",double_t,   0, "Threshold to consider if a point is nearby cork piece", 0.01, 0.0005, 1)
best_cork_group.add("space_count_points_threshold",int_t,   0, "How many points at <space_distance_threshold> to be considered nearby", 250, 1, 50000)
best_cork_group.add("space_k_neighbors",int_t,   0, "KDTree K param for the neighbor search in space function", 500, 1, 15000)
best_cork_group.add("bad_shape_percentage_threshold",double_t,   0, "How much percentage there can be on a cluster bounding box width/length", 0.5, 0, 1)
best_cork_group.add("volume_threshold",double_t,   0, "Determines if a cork_piece bounding box is of a certain volume", 0.0005, 0.00001, 2)
best_cork_group.add("splitted_cork_distance_threshold",double_t,   0, "When considering splitted clusters for a cork piece, how far can they be", 0.1, 0.0005, 1)
best_cork_group.add("splitted_cork_normal_threshold",double_t,   0, "Splitted cork clusters should have 90o angle on their normals, so dot product should be close to 0", 0.2, 0, 1)



exit(gen.generate(PACKAGE, "cork_iris", "PCLCork"))